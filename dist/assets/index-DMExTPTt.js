(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&o(a)}).observe(document,{childList:!0,subtree:!0});function e(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(r){if(r.ep)return;r.ep=!0;const s=e(r);fetch(r.href,s)}})();const u={warden:{id:"warden",name:"Warden Protocol",type:"cosmos",testnet:{id:"warden-testnet",name:"Warden Testnet",rpc:"https://warden-testnet-rpc.itrocket.net",api:"https://warden-testnet-api.itrocket.net",explorer:"https://explorer.wardenprotocol.org",currency:{name:"Warden",symbol:"WARD",decimals:6}},mainnet:{id:"warden-mainnet",name:"Warden Mainnet",rpc:"https://warden-rpc.itrocket.net",api:"https://warden-api.itrocket.net",explorer:"https://explorer.wardenprotocol.org",currency:{name:"Warden",symbol:"WARD",decimals:6}}},osmosis:{id:"osmosis",name:"Osmosis",type:"cosmos",testnet:{id:"osmosis-testnet",name:"Osmosis Testnet",rpc:"https://rpc.testnet.osmosis.zone",api:"https://lcd.testnet.osmosis.zone",explorer:"https://testnet.osmosis.zone",currency:{name:"OSMO",symbol:"OSMO",decimals:6}},mainnet:{id:"osmosis-mainnet",name:"Osmosis Mainnet",rpc:"https://rpc.osmosis.zone",api:"https://lcd.osmosis.zone",explorer:"https://app.osmosis.zone",currency:{name:"OSMO",symbol:"OSMO",decimals:6}}},arbitrum:{id:"arbitrum",name:"Arbitrum",type:"evm",testnet:{id:"arbitrum-goerli",name:"Arbitrum Goerli",rpc:"https://goerli-rollup.arbitrum.io/rpc",api:"https://api-goerli.arbiscan.io/api",explorer:"https://goerli.arbiscan.io",currency:{name:"Ether",symbol:"ETH",decimals:18}},mainnet:{id:"arbitrum-mainnet",name:"Arbitrum One",rpc:"https://arb1.arbitrum.io/rpc",api:"https://api.arbiscan.io/api",explorer:"https://arbiscan.io",currency:{name:"Ether",symbol:"ETH",decimals:18}}}},m=u.warden.testnet,g={cosmos:{status:"/status",block:"/block?height={height}",blockchain:"/blockchain?minHeight={min}&maxHeight={max}",validators:"/validators",tx:"/tx?hash={hash}",account:"/cosmos/auth/v1beta1/accounts/{address}"},evm:{status:"",block:"",transaction:"",account:""}},h={eth_blockNumber:"eth_blockNumber",eth_getBlockByNumber:"eth_getBlockByNumber",eth_getTransactionReceipt:"eth_getTransactionReceipt",eth_getBalance:"eth_getBalance"};class p{constructor(t){this.network=t,this.baseRpcUrl=t.rpc,this.baseApiUrl=t.api,this.endpoints=g[t.type]}async fetchWithTimeout(t,e={}){const{timeout:o=1e4,...r}=e,s=new AbortController,a=setTimeout(()=>s.abort(),o);try{const c=await fetch(t,{...r,signal:s.signal});if(clearTimeout(a),!c.ok)throw new Error(`HTTP ${c.status}: ${c.statusText}`);return await c.json()}catch(c){throw clearTimeout(a),c}}async getStatus(){if(!this.endpoints.status)throw new Error("Status endpoint not available for this network type");try{return(await this.fetchWithTimeout(`${this.baseRpcUrl}${this.endpoints.status}`)).result}catch(t){throw console.error("Error fetching status:",t),t}}async getBlock(t){if(!this.endpoints.block)throw new Error("Block endpoint not available for this network type");try{const e=`${this.baseRpcUrl}${this.endpoints.block.replace("{height}",t)}`;return(await this.fetchWithTimeout(e)).result}catch(e){throw console.error(`Error fetching block ${t}:`,e),e}}async getLatestBlocks(t=10){try{const e=await this.getStatus(),o=parseInt(e.sync_info.latest_block_height),r=Math.max(1,o-t+1),s=`${this.baseRpcUrl}${this.endpoints.blockchain}`.replace("{min}",r).replace("{max}",o),a=await this.fetchWithTimeout(s);return a.result&&a.result.block_metas?a.result.block_metas.reverse():[]}catch(e){throw console.error("Error fetching latest blocks:",e),e}}}class w extends p{constructor(t){super(t)}async getValidators(){try{return(await this.fetchWithTimeout(`${this.baseRpcUrl}${this.endpoints.validators}`)).result.validators}catch(t){throw console.error("Error fetching validators:",t),t}}async getAccount(t){try{const e=`${this.baseApiUrl}${this.endpoints.account.replace("{address}",t)}`;return(await this.fetchWithTimeout(e)).account}catch(e){throw console.error(`Error fetching account ${t}:`,e),e}}async getTransaction(t){try{const e=`${this.baseRpcUrl}${this.endpoints.tx.replace("{hash}",t)}`;return(await this.fetchWithTimeout(e)).result}catch(e){throw console.error(`Error fetching transaction ${t}:`,e),e}}}class b extends p{constructor(t){super(t)}async jsonRpcRequest(t,e=[]){try{return(await(await fetch(this.baseRpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:t,params:e,id:1})})).json()).result}catch(o){throw console.error(`JSON-RPC ${t} error:`,o),o}}async getLatestBlockNumber(){return this.jsonRpcRequest(h.eth_blockNumber)}async getBlockByNumber(t,e=!1){return this.jsonRpcRequest(h.eth_getBlockByNumber,[t,e])}async getTransactionReceipt(t){return this.jsonRpcRequest(h.eth_getTransactionReceipt,[t])}async getAccountBalance(t,e="latest"){return this.jsonRpcRequest(h.eth_getBalance,[t,e])}}class y{constructor(){this.currentNetwork=m,this.apiService=this.createApiService(m),this.isConnected=!1,this.subscribers=[]}createApiService(t){return t.type==="cosmos"?new w(t):new b(t)}subscribe(t){return this.subscribers.push(t),()=>{this.subscribers=this.subscribers.filter(e=>e!==t)}}notifySubscribers(){this.subscribers.forEach(t=>t(this.currentNetwork))}async switchNetwork(t){const e=Object.values(u).flatMap(o=>[o.testnet,o.mainnet].filter(Boolean)).find(o=>o.id===t);if(!e)throw new Error(`Network ${t} not found`);this.currentNetwork=e,this.apiService=this.createApiService(e);try{return await this.testConnection(),this.isConnected=!0,this.notifySubscribers(),!0}catch(o){throw this.isConnected=!1,o}}async testConnection(){try{return this.currentNetwork.type==="cosmos"?await this.apiService.getStatus():await this.apiService.getLatestBlockNumber(),!0}catch(t){throw new Error(`Connection to ${this.currentNetwork.name} failed: ${t.message}`)}}getCurrentNetwork(){return this.currentNetwork}getApiService(){return this.apiService}}const n=new y;class k{constructor(){this.element=document.getElementById("network-switcher"),this.availableNetworks=Object.values(u).flatMap(t=>[t.testnet,t.mainnet].filter(Boolean)),this.render(),this.setupEvents()}render(){this.element.innerHTML=`
            <select class="network-select">
                ${this.availableNetworks.map(t=>`
                    <option value="${t.id}" ${t.id===n.getCurrentNetwork().id?"selected":""}>
                        ${t.name}
                    </option>
                `).join("")}
            </select>
        `}setupEvents(){this.element.querySelector(".network-select").addEventListener("change",async t=>{try{await n.switchNetwork(t.target.value),document.getElementById("page-title").textContent=`${n.getCurrentNetwork().name} Explorer`,document.title=`${n.getCurrentNetwork().name} Explorer`}catch(e){console.error("Failed to switch network:",e),this.showError(e.message)}})}showError(t){const e=document.createElement("div");e.className="toast",e.textContent=t,document.getElementById("toast-container").appendChild(e),setTimeout(()=>{e.remove()},3e3)}}class i{static show(t,e="info",o=3e3){const r=document.createElement("div");return r.className=`toast toast-${e}`,r.textContent=t,(document.getElementById("toast-container")||document.body).appendChild(r),setTimeout(()=>{r.classList.add("fade-out"),setTimeout(()=>r.remove(),300)},o),r}}class f{constructor(){this.currentPage="overview",this.initComponents(),this.setupEventListeners(),this.loadInitialData(),this.setupNetworkListener()}initComponents(){this.networkSwitcher=new k}setupEventListeners(){var t,e,o;document.querySelectorAll(".nav-item").forEach(r=>{r.addEventListener("click",s=>{s.preventDefault();const a=r.getAttribute("data-page");this.showPage(a)})}),(t=document.getElementById("refresh-blocks"))==null||t.addEventListener("click",()=>this.loadBlocks()),(e=document.getElementById("refresh-txs"))==null||e.addEventListener("click",()=>this.loadTransactions()),(o=document.getElementById("refresh-validators"))==null||o.addEventListener("click",()=>this.loadValidators()),document.getElementById("global-search").addEventListener("keypress",r=>{r.key==="Enter"&&this.handleSearch(r.target.value)})}setupNetworkListener(){n.subscribe(t=>{this.updateNetworkInfo(),this.loadPageData(this.currentPage)})}async loadInitialData(){try{await this.updateNetworkInfo(),this.loadPageData(this.currentPage)}catch(t){console.error("Initial data load failed:",t),i.show("Failed to load initial data","error")}}async updateNetworkInfo(){const t=n.getCurrentNetwork();document.getElementById("network-name").textContent=t.name;try{const e=n.getApiService();if(t.type==="cosmos"){const o=await e.getStatus();document.getElementById("latest-block").textContent=o.sync_info.latest_block_height;const r=await e.getValidators();document.getElementById("validators-count").textContent=r.length}else{const o=await e.getLatestBlockNumber();document.getElementById("latest-block").textContent=parseInt(o,16),document.getElementById("validators-count").textContent="N/A"}}catch(e){console.error("Error updating network info:",e),i.show("Failed to update network info","error")}}showPage(t){document.querySelectorAll(".page").forEach(e=>{e.classList.remove("active")}),document.getElementById(`${t}-page`).classList.add("active"),document.querySelectorAll(".nav-item").forEach(e=>{e.classList.remove("active")}),document.querySelector(`.nav-item[data-page="${t}"]`).classList.add("active"),this.currentPage=t,this.loadPageData(t)}loadPageData(t){switch(t){case"overview":this.updateNetworkInfo();break;case"blocks":this.loadBlocks();break;case"transactions":this.loadTransactions();break;case"validators":this.loadValidators();break}}async loadBlocks(){const t=document.getElementById("blocks-table-body");t.innerHTML='<tr><td colspan="4" class="loading">Loading blocks...</td></tr>';try{const e=n.getApiService();if(n.getCurrentNetwork().type==="cosmos"){const r=await e.getLatestBlocks(20);t.innerHTML=r.map(s=>`
                    <tr>
                        <td>${s.header.height}</td>
                        <td>${this.formatHash(s.block_id.hash)}</td>
                        <td>${this.formatTime(s.header.time)}</td>
                        <td>${s.num_txs||0}</td>
                    </tr>
                `).join("")}else{const r=await e.getLatestBlockNumber(),s=await e.getBlockByNumber(r,!1);t.innerHTML=`
                    <tr>
                        <td>${parseInt(s.number,16)}</td>
                        <td>${this.formatHash(s.hash)}</td>
                        <td>${this.formatTime(parseInt(s.timestamp,16)*1e3)}</td>
                        <td>${s.transactions.length}</td>
                    </tr>
                `}}catch(e){console.error("Error loading blocks:",e),t.innerHTML='<tr><td colspan="4" class="loading">Error loading blocks</td></tr>',i.show("Failed to load blocks","error")}}async loadTransactions(){const t=document.getElementById("transactions-table-body");t.innerHTML='<tr><td colspan="4" class="loading">Loading transactions...</td></tr>';try{const e=n.getApiService(),o=n.getCurrentNetwork();if(o.type==="cosmos"){const r=await e.getLatestBlocks(5);let s=[];for(const a of r)if(a.num_txs>0){const c=await e.getBlock(a.header.height);s.push(...c.block.data.txs.map(d=>({hash:d,height:a.header.height,time:a.header.time})))}t.innerHTML=s.slice(0,20).map(a=>`
                    <tr>
                        <td>${this.formatHash(a.hash)}</td>
                        <td>${a.height}</td>
                        <td>${this.formatTime(a.time)}</td>
                        <td>Transfer</td>
                    </tr>
                `).join("")}else{const r=await e.getLatestBlockNumber(),s=await e.getBlockByNumber(r,!0);t.innerHTML=s.transactions.slice(0,20).map(a=>`
                    <tr>
                        <td>${this.formatHash(a.hash)}</td>
                        <td>${parseInt(s.number,16)}</td>
                        <td>${this.formatTime(parseInt(s.timestamp,16)*1e3)}</td>
                        <td>${a.value} ${o.currency.symbol}</td>
                    </tr>
                `).join("")}}catch(e){console.error("Error loading transactions:",e),t.innerHTML='<tr><td colspan="4" class="loading">Error loading transactions</td></tr>',i.show("Failed to load transactions","error")}}async loadValidators(){const t=document.getElementById("validators-table-body");t.innerHTML='<tr><td colspan="4" class="loading">Loading validators...</td></tr>';try{const e=n.getApiService();if(n.getCurrentNetwork().type==="cosmos"){const r=await e.getValidators();t.innerHTML=r.map((s,a)=>{var c,d;return`
                    <tr>
                        <td>${a+1}</td>
                        <td>${this.formatHash(s.address)}</td>
                        <td>${parseInt(s.voting_power)}</td>
                        <td>${((d=(c=s.commission)==null?void 0:c.commission_rates)==null?void 0:d.rate)||"0%"}</td>
                    </tr>
                `}).join("")}else t.innerHTML='<tr><td colspan="4" class="loading">Validators not available for EVM chains</td></tr>'}catch(e){console.error("Error loading validators:",e),t.innerHTML='<tr><td colspan="4" class="loading">Error loading validators</td></tr>',i.show("Failed to load validators","error")}}handleSearch(t){n.getCurrentNetwork(),n.getApiService(),/^\d+$/.test(t)?this.showBlock(t):/^0x[a-fA-F0-9]{64}$/.test(t)?this.showTransaction(t):/^[a-zA-Z0-9]{40,64}$/.test(t)?this.showAddress(t):i.show("Invalid search query","error")}async showBlock(t){try{const e=await n.getApiService().getBlock(t);console.log("Block:",e),i.show(`Block ${t} found`,"success")}catch{i.show(`Block ${t} not found`,"error")}}async showTransaction(t){try{let e;n.getCurrentNetwork().type==="cosmos"?e=await n.getApiService().getTransaction(t):e=await n.getApiService().getTransactionReceipt(t),console.log("Transaction:",e),i.show(`Transaction ${t.substring(0,12)}... found`,"success")}catch{i.show(`Transaction ${t.substring(0,12)}... not found`,"error")}}async showAddress(t){try{let e;if(n.getCurrentNetwork().type==="cosmos")e=await n.getApiService().getAccount(t);else{const o=await n.getApiService().getAccountBalance(t);e={address:t,balance:o}}console.log("Account:",e),i.show(`Account ${t.substring(0,12)}... found`,"success")}catch{i.show(`Account ${t.substring(0,12)}... not found`,"error")}}formatHash(t,e=8){return t?t.length>e*2?`${t.substring(0,e)}...${t.substring(t.length-e)}`:t:"N/A"}formatTime(t){try{return new Date(t).toLocaleString()}catch{return"N/A"}}}document.addEventListener("DOMContentLoaded",()=>{new f});
